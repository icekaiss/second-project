import copy

TEAMS = [
    'Panthers',
    'Bandits',
    'Warriors',
]

PLAYERS = [{
        'name': 'Karl Saygan',
        'guardians': 'Heather Bledsoe',
        'experience': 'YES',
        'height': '42 inches'
    },
    {
        'name': 'Matt Gill',
        'guardians': 'Charles Gill and Sylvia Gill',
        'experience': 'NO',
        'height': '40 inches'
    },
    {   'name': 'Sammy Adams',
        'guardians': 'Jeff Adams and Gary Adams',
        'experience': 'NO',
        'height': '45 inches'
    },
    {
        'name': 'Chloe Alaska',
        'guardians': 'David Alaska and Jamie Alaska',
        'experience': 'NO',
        'height': '47 inches'
    },
    {
        'name': 'Bill Bon',
        'guardians': 'Sara Bon and Jenny Bon',
        'experience': 'YES',
        'height': '43 inches'
    },
    {
        'name': 'Joe Kavalier',
        'guardians': 'Sam Kavalier and Elaine Kavalier',
        'experience': 'NO',
        'height': '39 inches'
    },
    {
        'name': 'Phillip Helm',
        'guardians': 'Thomas Helm and Eva Jones',
        'experience': 'YES',
        'height': '44 inches'
    },
    {
        'name': 'Les Clay',
        'guardians': 'Wynonna Brown',
        'experience': 'YES',
        'height': '42 inches'
    },
    {
        'name': 'Sal Dali',
        'guardians': 'Gala Dali',
        'experience': 'NO',
        'height': '41 inches'
    },
    {
        'name': 'Suzane Greenberg',
        'guardians': 'Henrietta Dumas',
        'experience': 'YES',
        'height': '44 inches'
    },
    {
        'name': 'Jill Tanner',
        'guardians': 'Mark Tanner',
        'experience': 'YES',
        'height': '36 inches'
    },
    {
        'name': 'Arnold Willis',
        'guardians': 'Claire Willis',
        'experience': 'NO',
        'height': '43 inches'
    },
    {
        'name': 'Herschel Krustofski',
        'guardians': 'Hyman Krustofski and Rachel Krustofski',
        'experience': 'YES',
        'height': '45 inches'
    },
    {
        'name': 'Eva Gordon',
        'guardians': 'Wendy Martin and Mike Gordon',
        'experience': 'NO',
        'height': '45 inches'
    },
    {
        'name': 'Ben Finkelstein',
        'guardians': 'Aaron Lanning and Jill Finkelstein',
        'experience': 'NO',
        'height': '44 inches'
    },
    {
        'name': 'Joe Smith',
        'guardians': 'Jim Smith and Jan Smith',
        'experience': 'YES',
        'height': '42 inches'
    },
    {
        'name': 'Diego Soto',
        'guardians': 'Robin Soto and Sarika Soto',
        'experience': 'YES',
        'height': '41 inches'
    },
    {
        'name': 'Kimmy Stein',
        'guardians': 'Bill Stein and Hillary Stein',
        'experience': 'NO',
        'height': '41 inches'
    }
]

def clean_data():
    """Convert height to integer and experience to boolean"""
    cleaned_players = copy.deepcopy(PLAYERS)
    for player in cleaned_players:
        player['height'] = int(player['height'].split()[0])
        player['experience'] = player['experience'] == 'YES'
    return cleaned_players

def balance_teams(players):
    """Distribute players evenly across teams by experience"""
    # Separate experienced and inexperienced players
    experienced = [player for player in players if player['experience']]
    inexperienced = [player for player in players if not player['experience']]
    
    # Sort both groups by height
    experienced.sort(key=lambda x: x['height'])
    inexperienced.sort(key=lambda x: x['height'])
    
    teams = {team: [] for team in TEAMS}
    
    # Distribute experienced players
    for i, player in enumerate(experienced):
        team_index = i % len(TEAMS)
        teams[TEAMS[team_index]].append(player)
    
    # Distribute inexperienced players
    for i, player in enumerate(inexperienced):
        team_index = i % len(TEAMS)
        teams[TEAMS[team_index]].append(player)
    
    # Sort each team's players by height
    for team in teams:
        teams[team].sort(key=lambda x: x['height'])
    
    return teams

def calculate_stats(teams):
    """Calculate and add statistics to each team"""
    for team_name, players in teams.items():
        experienced = sum(1 for player in players if player['experience'])
        inexperienced = sum(1 for player in players if not player['experience'])
        total_players = len(players)
        avg_height = sum(player['height'] for player in players) / total_players if total_players > 0 else 0
        
        teams[team_name] = {
            'players': players,
            'stats': {
                'total_players': total_players,
                'experienced': experienced,
                'inexperienced': inexperienced,
                'average_height': round(avg_height, 2)
            }
        }
    return teams

def display_team_stats(team_name, team_data):
    """Display statistics for a specific team"""
    stats = team_data['stats']
    print(f"\nTeam: {team_name} Stats")
    print("--------------------")
    print(f"Total players: {stats['total_players']}")
    print(f"Experienced players: {stats['experienced']}")
    print(f"Inexperienced players: {stats['inexperienced']}")
    print(f"Average height: {stats['average_height']} inches\n")
    
    print("Players:")
    for player in team_data['players']:
        exp_status = "Experienced" if player['experience'] else "Inexperienced"
        print(f"  {player['name']} ({exp_status}), {player['height']} inches")
    
    print("\nGuardians:")
    guardians = []
    for player in team_data['players']:
        if 'guardians' in player:
            guardians.append(player['guardians'])
        elif 'guardians' in player:  # Handle typo in data (guardians vs guardians)
            guardians.append(player['guardians'])
    print("  " + ", ".join(guardians))

def main():
    players = clean_data()
    teams = balance_teams(players)
    teams_with_stats = calculate_stats(teams)
    
    while True:
        print("\nBASKETBALL TEAM STATS TOOL")
        print("---- MENU ----")
        print("1. Display Team Stats")
        print("2. Quit")
        
        choice = input("\nEnter an option (1 or 2): ")
        
        if choice == '1':
            print("\nTeams:")
            for i, team in enumerate(TEAMS, 1):
                print(f"{i}. {team}")
            
            team_choice = input("\nEnter team number: ")
            try:
                team_index = int(team_choice) - 1
                if 0 <= team_index < len(TEAMS):
                    team_name = TEAMS[team_index]
                    display_team_stats(team_name, teams_with_stats[team_name])
                else:
                    print("Invalid team number. Please try again.")
            except ValueError:
                print("Please enter a valid number.")
        
        elif choice == '2':
            print("Goodbye!")
            break
        
        else:
            print("Invalid option. Please enter 1 or 2.")

if __name__ == "__main__":
    main()
